{
  "swagger": "2.0",
  "info": {
    "title": "Authz",
    "description": "Allows users and apps to register themselves and retrieve authorization tokens for API access",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "Login",
      "description": "Service to exchange authorization tokens with users, if they pass a unique challenge"
    }
  ],
  "host": "localhost:8080",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/ca": {
      "get": {
        "summary": "Returns the Certificate Authority's root certificate and any existing intermediates in this chain-of-trust",
        "description": "This endpoint returns the Certificate Authority's certificate, as well as any existing intermediate certificates in this chain-of-trust.",
        "operationId": "CertificateAuthority_RootCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RootCertificateResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/registry": {
      "post": {
        "summary": "Processes a service's registry request",
        "description": "This endpoint receives service registry requests, which are replied to with a system's Certificate Authority issued certificate, unique to this service.",
        "operationId": "CertificateAuthority_RegisterService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CertificateResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CertificateRequest"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/services/{service}/certs": {
      "post": {
        "summary": "Fetches a service's certificates, based on their service name and public key",
        "description": "This endpoint receives service certificate requests, which are replied to with a system's Certificate Authority issued certificates, unique to this service.",
        "operationId": "CertificateAuthority_ListCertificates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCertificatesResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityListCertificatesBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/services/{service}/certs/create": {
      "post": {
        "summary": "Processes a service's certificate creation request",
        "description": "This endpoint receives service certificate creation requests, which are replied to with a system's Certificate Authority issued certificate, unique to this service.",
        "operationId": "CertificateAuthority_CreateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CertificateResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityCreateCertificateBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/services/{service}/certs/delete": {
      "post": {
        "summary": "Removes a service's certificate, based on their service name and public key.",
        "description": "This endpoint receives service certificate deletion requests, which in turn removes the referred certificates for this service (or all of them).",
        "operationId": "CertificateAuthority_DeleteCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CertificateDeletionResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityDeleteCertificateBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/services/{service}/delete": {
      "post": {
        "summary": "Drops a service, based on the requesters' service name, public key and certificate",
        "description": "This endpoint receives service deletion requests, which are complied with if the requester presents all valid information.",
        "operationId": "CertificateAuthority_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletionResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityDeleteServiceBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/ca/services/{service}/verify": {
      "post": {
        "summary": "Verifies a certificate for a given service, based on the service's stored public key",
        "description": "This endpoint receives certificate verification requests, based on the stored public key for a given service.",
        "operationId": "CertificateAuthority_VerifyCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerificationResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateAuthorityVerifyCertificateBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/login": {
      "post": {
        "summary": "Processes a user login request",
        "description": "This endpoint receives user login requests, which are replied to with a challenge response.",
        "operationId": "Authz_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LoginRequest"
            }
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/v1/signup": {
      "post": {
        "summary": "Processes a user registry request",
        "description": "This endpoint receives user registry requests, which are replied to with a system's Certificate Authority issued certificate, unique to this user.",
        "operationId": "Authz_SignUp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignUpResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignUpRequest"
            }
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/v1/token": {
      "post": {
        "summary": "Processes a request for an authorization token",
        "description": "This endpoint receives user's challenge response, which are replied to with an authentication token if valid.",
        "operationId": "Authz_Token",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TokenResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TokenRequest"
            }
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/v1/validate": {
      "post": {
        "summary": "Processes a validation request for an authorization token",
        "description": "This endpoint receives user's token, validating if it's usable.",
        "operationId": "Authz_VerifyToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AuthResponse"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthRequest"
            }
          }
        ],
        "tags": [
          "Login"
        ]
      }
    }
  },
  "definitions": {
    "CertificateAuthorityCreateCertificateBody": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte"
        },
        "signing_req": {
          "$ref": "#/definitions/v1CSR"
        }
      }
    },
    "CertificateAuthorityDeleteCertificateBody": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte"
        },
        "certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "CertificateAuthorityDeleteServiceBody": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "CertificateAuthorityListCertificatesBody": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "format": "byte"
        },
        "signing_req": {
          "$ref": "#/definitions/v1CSR"
        }
      }
    },
    "CertificateAuthorityVerifyCertificateBody": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Attribute": {
      "type": "object",
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1AuthRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "v1AuthResponse": {
      "type": "object"
    },
    "v1CSR": {
      "type": "object",
      "properties": {
        "subject": {
          "$ref": "#/definitions/v1Subject"
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Extension"
          }
        },
        "extra_extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Extension"
          }
        },
        "dns_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ip_addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IPAddress"
          }
        },
        "uris": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1URL"
          }
        }
      }
    },
    "v1CertificateDeletionResponse": {
      "type": "object"
    },
    "v1CertificateRequest": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "pub_key": {
          "type": "string",
          "format": "byte"
        },
        "signing_req": {
          "$ref": "#/definitions/v1CSR"
        }
      }
    },
    "v1CertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "format": "byte"
        },
        "expires_on": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1DeletionResponse": {
      "type": "object"
    },
    "v1Extension": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "critical": {
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1IPAddress": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ListCertificatesResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CertificateResponse"
          }
        }
      }
    },
    "v1LoginRequest": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "format": "byte"
        },
        "service_certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1LoginResponse": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string",
          "format": "byte"
        },
        "expires_on": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RootCertificateResponse": {
      "type": "object",
      "properties": {
        "root_certificate": {
          "type": "string",
          "format": "byte"
        },
        "intermediates": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "v1SignUpRequest": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "pub_key": {
          "type": "string",
          "format": "byte"
        },
        "signing_req": {
          "$ref": "#/definitions/v1CSR"
        }
      }
    },
    "v1SignUpResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "format": "byte"
        },
        "service_certificate": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1Subject": {
      "type": "object",
      "properties": {
        "country": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organization": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizational_unit": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locality": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "province": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "street_address": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postal_code": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serial_number": {
          "type": "string"
        },
        "common_name": {
          "type": "string"
        },
        "names": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Attribute"
          }
        },
        "extra_names": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Attribute"
          }
        }
      }
    },
    "v1TokenRequest": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "format": "byte"
        },
        "signed_challenge": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1TokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "expires_on": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1URL": {
      "type": "object",
      "properties": {
        "scheme": {
          "type": "string"
        },
        "opaque": {
          "type": "string"
        },
        "user_info": {
          "$ref": "#/definitions/v1UserInfo"
        },
        "host": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "raw_path": {
          "type": "string"
        },
        "omit_host": {
          "type": "boolean"
        },
        "force_query": {
          "type": "boolean"
        },
        "raw_query": {
          "type": "string"
        },
        "fragment": {
          "type": "string"
        },
        "raw_fragment": {
          "type": "string"
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "password_set": {
          "type": "boolean"
        }
      }
    },
    "v1VerificationResponse": {
      "type": "object"
    }
  }
}
