syntax = "proto3";

package authz.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/zalgonoise/x/authz/pb;pb";


// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  swagger: "2.0"
  info: {
    title: "Authz"
    version: "1.0"
    description: "Allows users and apps to register themselves and retrieve authorization tokens for API access"
  }
  schemes: HTTP
  host: "localhost:8080"
  tags: [
    {
      name: "Login"
      description: "Service to exchange authorization tokens with users, if they pass a unique challenge"
    }
  ]
  responses: {
    key: "401"
    value: {
      description: "Unauthenticated"
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus"
        }
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Unauthorized"
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus"
        }
      }
    }
  }
};

service CertificateAuthority {
  rpc Register(CertificateRequest) returns (CertificateResponse) {
    option (google.api.http) = {
      post: "/v1/ca/registry"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a service's registry request"
      description: "This endpoint receives service registry requests, which are replied to with a system's Certificate Authority issued certificate, unique to this service."
      tags: "Certificates"
    };
  }

  rpc GetCertificate(CertificateRequest) returns (CertificateResponse) {
    option (google.api.http) = {
      post: "/v1/ca/services/{service}/cert"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Fetches a service's certificate, based on their service name and public key"
      description: "This endpoint receives service certificate requests, which are replied to with a system's Certificate Authority issued certificate, unique to this service."
      tags: "Certificates"
    };
  }

  rpc DeleteService(DeletionRequest) returns (DeletionResponse) {
    option (google.api.http) = {
      post: "/v1/ca/services/{service}/delete"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Drops a service, based on the requesters' service name, public key and certificate"
      description: "This endpoint receives service deletion requests, which are complied with if the requester presents all valid information."
      tags: "Certificates"
    };
  }

  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {
    option (google.api.http) = {
      get: "/v1/ca"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the Certificate Authority's public key"
      description: "This endpoint returns the Certificate Authority's public key."
      tags: "Certificates"
    };
  }
}

message CertificateRequest {
  string service = 1 [json_name="service", (validate.rules).string.min_len = 1];
  bytes public_key = 2 [json_name="pub_key", (validate.rules).bytes.min_len = 1];
  CSR signing_request = 3 [json_name="signing_req"];
}

message CSR {
  Subject subject = 1 [json_name="subject"];
  repeated Extension extensions = 2 [json_name="extensions"];
  repeated Extension extra_extensions = 3 [json_name="extra_extensions"];
  repeated string dns_names = 4 [json_name="dns_names"];
  repeated string email_addresses = 5 [json_name="email_addresses"];
  repeated IPAddress ip_addresses = 6 [json_name="ip_addresses"];
  repeated URL uris = 7 [json_name="uris"];
}

message Subject {
  repeated string country = 1 [json_name="country"];
  repeated string organization = 2 [json_name="organization"];
  repeated string organizational_unit = 3 [json_name="organizational_unit"];
  repeated string locality = 4 [json_name="locality"];
  repeated string province = 5 [json_name="province"];
  repeated string street_address = 6 [json_name="street_address"];
  repeated string postal_code = 7 [json_name="postal_code"];
  string serial_number = 8 [json_name="serial_number"];
  string common_name = 9 [json_name="common_name"];
  repeated Attribute names = 10 [json_name="names"];
  repeated Attribute extra_names = 11 [json_name="extra_names"];
}

message Extension {
  repeated int32 id = 1 [json_name="id"];
  bool critical = 2 [json_name="critical"];
  bytes value = 3 [json_name="value"];
}

message IPAddress {
  bytes ip = 1 [json_name="ip"];
}

message URL {
  string scheme = 1 [json_name="scheme"];
  string opaque = 2 [json_name="opaque"];
  UserInfo user_info = 3 [json_name="user_info"];
  string host = 4 [json_name="host"];
  string path = 5 [json_name="path"];
  string raw_path = 6 [json_name="raw_path"];
  bool omit_host = 7 [json_name="omit_host"];
  bool force_query = 8 [json_name="force_query"];
  string raw_query = 9 [json_name="raw_query"];
  string fragment = 10 [json_name="fragment"];
  string raw_fragment = 11 [json_name="raw_fragment"];
}

message UserInfo {
  string username = 1 [json_name="username"];
  string password = 2 [json_name="password"];
  bool password_set = 3 [json_name="password_set"];
}

message Attribute {
  repeated int32 type = 1 [json_name="type"];
  string value = 2 [json_name="value"];
}

message CertificateResponse {
  bytes certificate = 1 [json_name="certificate"];
}

message DeletionRequest {
  string service = 1 [json_name="service", (validate.rules).string.min_len = 1];
  bytes public_key = 2 [json_name="pub_key", (validate.rules).bytes.min_len = 1];
  bytes certificate = 3 [json_name="certificate", (validate.rules).bytes.min_len = 1];
}

message DeletionResponse {}

message PublicKeyRequest {}

message PublicKeyResponse {
  bytes public_key = 1 [json_name="pub_key"];
}

service Authz {
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/register"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a user registry request"
      description: "This endpoint receives user registry requests, which are replied to with a system's Certificate Authority issued certificate, unique to this user."
      tags: "Login"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/login"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a user login request"
      description: "This endpoint receives user login requests, which are replied to with a challenge response."
      tags: "Login"
    };
  }

  rpc GetToken(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/v1/token"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a request for an authorization token"
      description: "This endpoint receives user's challenge response, "
          "which are replied to with an authentication token if valid."
      tags: "Login"
    };
  }
}


message RegisterRequest {
  string name = 1 [json_name="name", (validate.rules).string.min_len = 1];
  bytes public_key = 2 [json_name="pub_key", (validate.rules).bytes.min_len = 1];
}

message RegisterResponse {
  bytes certificate = 1 [json_name="certificate"];
  ID service = 2 [json_name="service"];
}

message LoginRequest {
  string name = 1 [json_name="name", (validate.rules).string.min_len = 1];
  ID service = 2 [json_name="service"];
  ID id = 3 [json_name="id"];
}

message ID {
  bytes public_key = 1 [json_name="pub_key", (validate.rules).bytes.min_len = 1];
  bytes certificate = 2 [json_name="certificate", (validate.rules).bytes.min_len = 1];
}

message LoginResponse {
  bytes challenge = 1 [json_name="challenge"];
}

message TokenRequest {
  string name = 1 [json_name="name", (validate.rules).string.min_len = 1];
  bytes signed_challenge = 2 [json_name="signed_challenge", (validate.rules).bytes.min_len = 1];
}

message TokenResponse{
  string token = 1 [json_name="token"];
  int64 expires_on = 2 [json_name="expires_on"];
}