// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

type Metrics_Expecter struct {
	mock *mock.Mock
}

func (_m *Metrics) EXPECT() *Metrics_Expecter {
	return &Metrics_Expecter{mock: &_m.Mock}
}

// RegisterCollector provides a mock function with given fields: collector
func (_m *Metrics) RegisterCollector(collector prometheus.Collector) {
	_m.Called(collector)
}

// Metrics_RegisterCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollector'
type Metrics_RegisterCollector_Call struct {
	*mock.Call
}

// RegisterCollector is a helper method to define mock.On call
//   - collector prometheus.Collector
func (_e *Metrics_Expecter) RegisterCollector(collector interface{}) *Metrics_RegisterCollector_Call {
	return &Metrics_RegisterCollector_Call{Call: _e.mock.On("RegisterCollector", collector)}
}

func (_c *Metrics_RegisterCollector_Call) Run(run func(collector prometheus.Collector)) *Metrics_RegisterCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prometheus.Collector))
	})
	return _c
}

func (_c *Metrics_RegisterCollector_Call) Return() *Metrics_RegisterCollector_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metrics_RegisterCollector_Call) RunAndReturn(run func(prometheus.Collector)) *Metrics_RegisterCollector_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
