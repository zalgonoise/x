// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: collide/v1/collide.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollideService_ListDistricts_FullMethodName                     = "/collide.v1.CollideService/ListDistricts"
	CollideService_ListAllTracksByDistrict_FullMethodName           = "/collide.v1.CollideService/ListAllTracksByDistrict"
	CollideService_ListDriftTracksByDistrict_FullMethodName         = "/collide.v1.CollideService/ListDriftTracksByDistrict"
	CollideService_GetAlternativesByDistrictAndTrack_FullMethodName = "/collide.v1.CollideService/GetAlternativesByDistrictAndTrack"
	CollideService_GetCollisionsByDistrictAndTrack_FullMethodName   = "/collide.v1.CollideService/GetCollisionsByDistrictAndTrack"
)

// CollideServiceClient is the client API for CollideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CollideService handles RPCs related to track listings and collisions, for different districts.
type CollideServiceClient interface {
	// ListDistricts fetches a list of configured districts in the CollideService.
	ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error)
	// ListAllTracksByDistrict fetches a list of every track within a certain district.
	ListAllTracksByDistrict(ctx context.Context, in *ListAllTracksByDistrictRequest, opts ...grpc.CallOption) (*ListAllTracksByDistrictResponse, error)
	// ListDriftTracksByDistrict fetches a list of drift tracks within a certain district.
	ListDriftTracksByDistrict(ctx context.Context, in *ListDriftTracksByDistrictRequest, opts ...grpc.CallOption) (*ListDriftTracksByDistrictResponse, error)
	// GetAlternativesByDistrictAndTrack returns a list of alternative tracks within a certain district, which will not
	// collide with the target track.
	GetAlternativesByDistrictAndTrack(ctx context.Context, in *GetAlternativesByDistrictAndTrackRequest, opts ...grpc.CallOption) (*GetAlternativesByDistrictAndTrackResponse, error)
	// GetCollisionsByDistrictAndTrack returns a list of tracks within a certain district, which will collide with the
	// target track.
	GetCollisionsByDistrictAndTrack(ctx context.Context, in *GetCollisionsByDistrictAndTrackRequest, opts ...grpc.CallOption) (*GetCollisionsByDistrictAndTrackResponse, error)
}

type collideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollideServiceClient(cc grpc.ClientConnInterface) CollideServiceClient {
	return &collideServiceClient{cc}
}

func (c *collideServiceClient) ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDistrictsResponse)
	err := c.cc.Invoke(ctx, CollideService_ListDistricts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collideServiceClient) ListAllTracksByDistrict(ctx context.Context, in *ListAllTracksByDistrictRequest, opts ...grpc.CallOption) (*ListAllTracksByDistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllTracksByDistrictResponse)
	err := c.cc.Invoke(ctx, CollideService_ListAllTracksByDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collideServiceClient) ListDriftTracksByDistrict(ctx context.Context, in *ListDriftTracksByDistrictRequest, opts ...grpc.CallOption) (*ListDriftTracksByDistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriftTracksByDistrictResponse)
	err := c.cc.Invoke(ctx, CollideService_ListDriftTracksByDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collideServiceClient) GetAlternativesByDistrictAndTrack(ctx context.Context, in *GetAlternativesByDistrictAndTrackRequest, opts ...grpc.CallOption) (*GetAlternativesByDistrictAndTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlternativesByDistrictAndTrackResponse)
	err := c.cc.Invoke(ctx, CollideService_GetAlternativesByDistrictAndTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collideServiceClient) GetCollisionsByDistrictAndTrack(ctx context.Context, in *GetCollisionsByDistrictAndTrackRequest, opts ...grpc.CallOption) (*GetCollisionsByDistrictAndTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollisionsByDistrictAndTrackResponse)
	err := c.cc.Invoke(ctx, CollideService_GetCollisionsByDistrictAndTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollideServiceServer is the server API for CollideService service.
// All implementations must embed UnimplementedCollideServiceServer
// for forward compatibility.
//
// CollideService handles RPCs related to track listings and collisions, for different districts.
type CollideServiceServer interface {
	// ListDistricts fetches a list of configured districts in the CollideService.
	ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error)
	// ListAllTracksByDistrict fetches a list of every track within a certain district.
	ListAllTracksByDistrict(context.Context, *ListAllTracksByDistrictRequest) (*ListAllTracksByDistrictResponse, error)
	// ListDriftTracksByDistrict fetches a list of drift tracks within a certain district.
	ListDriftTracksByDistrict(context.Context, *ListDriftTracksByDistrictRequest) (*ListDriftTracksByDistrictResponse, error)
	// GetAlternativesByDistrictAndTrack returns a list of alternative tracks within a certain district, which will not
	// collide with the target track.
	GetAlternativesByDistrictAndTrack(context.Context, *GetAlternativesByDistrictAndTrackRequest) (*GetAlternativesByDistrictAndTrackResponse, error)
	// GetCollisionsByDistrictAndTrack returns a list of tracks within a certain district, which will collide with the
	// target track.
	GetCollisionsByDistrictAndTrack(context.Context, *GetCollisionsByDistrictAndTrackRequest) (*GetCollisionsByDistrictAndTrackResponse, error)
	mustEmbedUnimplementedCollideServiceServer()
}

// UnimplementedCollideServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollideServiceServer struct{}

func (UnimplementedCollideServiceServer) ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (UnimplementedCollideServiceServer) ListAllTracksByDistrict(context.Context, *ListAllTracksByDistrictRequest) (*ListAllTracksByDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTracksByDistrict not implemented")
}
func (UnimplementedCollideServiceServer) ListDriftTracksByDistrict(context.Context, *ListDriftTracksByDistrictRequest) (*ListDriftTracksByDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriftTracksByDistrict not implemented")
}
func (UnimplementedCollideServiceServer) GetAlternativesByDistrictAndTrack(context.Context, *GetAlternativesByDistrictAndTrackRequest) (*GetAlternativesByDistrictAndTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlternativesByDistrictAndTrack not implemented")
}
func (UnimplementedCollideServiceServer) GetCollisionsByDistrictAndTrack(context.Context, *GetCollisionsByDistrictAndTrackRequest) (*GetCollisionsByDistrictAndTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollisionsByDistrictAndTrack not implemented")
}
func (UnimplementedCollideServiceServer) mustEmbedUnimplementedCollideServiceServer() {}
func (UnimplementedCollideServiceServer) testEmbeddedByValue()                        {}

// UnsafeCollideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollideServiceServer will
// result in compilation errors.
type UnsafeCollideServiceServer interface {
	mustEmbedUnimplementedCollideServiceServer()
}

func RegisterCollideServiceServer(s grpc.ServiceRegistrar, srv CollideServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollideServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollideService_ServiceDesc, srv)
}

func _CollideService_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollideServiceServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollideService_ListDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollideServiceServer).ListDistricts(ctx, req.(*ListDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollideService_ListAllTracksByDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllTracksByDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollideServiceServer).ListAllTracksByDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollideService_ListAllTracksByDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollideServiceServer).ListAllTracksByDistrict(ctx, req.(*ListAllTracksByDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollideService_ListDriftTracksByDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriftTracksByDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollideServiceServer).ListDriftTracksByDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollideService_ListDriftTracksByDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollideServiceServer).ListDriftTracksByDistrict(ctx, req.(*ListDriftTracksByDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollideService_GetAlternativesByDistrictAndTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlternativesByDistrictAndTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollideServiceServer).GetAlternativesByDistrictAndTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollideService_GetAlternativesByDistrictAndTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollideServiceServer).GetAlternativesByDistrictAndTrack(ctx, req.(*GetAlternativesByDistrictAndTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollideService_GetCollisionsByDistrictAndTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollisionsByDistrictAndTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollideServiceServer).GetCollisionsByDistrictAndTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollideService_GetCollisionsByDistrictAndTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollideServiceServer).GetCollisionsByDistrictAndTrack(ctx, req.(*GetCollisionsByDistrictAndTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollideService_ServiceDesc is the grpc.ServiceDesc for CollideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collide.v1.CollideService",
	HandlerType: (*CollideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDistricts",
			Handler:    _CollideService_ListDistricts_Handler,
		},
		{
			MethodName: "ListAllTracksByDistrict",
			Handler:    _CollideService_ListAllTracksByDistrict_Handler,
		},
		{
			MethodName: "ListDriftTracksByDistrict",
			Handler:    _CollideService_ListDriftTracksByDistrict_Handler,
		},
		{
			MethodName: "GetAlternativesByDistrictAndTrack",
			Handler:    _CollideService_GetAlternativesByDistrictAndTrack_Handler,
		},
		{
			MethodName: "GetCollisionsByDistrictAndTrack",
			Handler:    _CollideService_GetCollisionsByDistrictAndTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collide/v1/collide.proto",
}
