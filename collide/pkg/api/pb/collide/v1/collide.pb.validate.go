// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: collide/v1/collide.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListDistrictsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDistrictsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDistrictsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDistrictsRequestMultiError, or nil if none found.
func (m *ListDistrictsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDistrictsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDistrictsRequestMultiError(errors)
	}

	return nil
}

// ListDistrictsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDistrictsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDistrictsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDistrictsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDistrictsRequestMultiError) AllErrors() []error { return m }

// ListDistrictsRequestValidationError is the validation error returned by
// ListDistrictsRequest.Validate if the designated constraints aren't met.
type ListDistrictsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDistrictsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDistrictsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDistrictsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDistrictsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDistrictsRequestValidationError) ErrorName() string {
	return "ListDistrictsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDistrictsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDistrictsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDistrictsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDistrictsRequestValidationError{}

// Validate checks the field values on ListDistrictsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDistrictsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDistrictsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDistrictsResponseMultiError, or nil if none found.
func (m *ListDistrictsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDistrictsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDistrictsResponseMultiError(errors)
	}

	return nil
}

// ListDistrictsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDistrictsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDistrictsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDistrictsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDistrictsResponseMultiError) AllErrors() []error { return m }

// ListDistrictsResponseValidationError is the validation error returned by
// ListDistrictsResponse.Validate if the designated constraints aren't met.
type ListDistrictsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDistrictsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDistrictsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDistrictsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDistrictsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDistrictsResponseValidationError) ErrorName() string {
	return "ListDistrictsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDistrictsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDistrictsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDistrictsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDistrictsResponseValidationError{}

// Validate checks the field values on ListAllTracksByDistrictRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllTracksByDistrictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllTracksByDistrictRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAllTracksByDistrictRequestMultiError, or nil if none found.
func (m *ListAllTracksByDistrictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllTracksByDistrictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDistrict()) < 1 {
		err := ListAllTracksByDistrictRequestValidationError{
			field:  "District",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAllTracksByDistrictRequestMultiError(errors)
	}

	return nil
}

// ListAllTracksByDistrictRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllTracksByDistrictRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAllTracksByDistrictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllTracksByDistrictRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllTracksByDistrictRequestMultiError) AllErrors() []error { return m }

// ListAllTracksByDistrictRequestValidationError is the validation error
// returned by ListAllTracksByDistrictRequest.Validate if the designated
// constraints aren't met.
type ListAllTracksByDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllTracksByDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllTracksByDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllTracksByDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllTracksByDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllTracksByDistrictRequestValidationError) ErrorName() string {
	return "ListAllTracksByDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllTracksByDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllTracksByDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllTracksByDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllTracksByDistrictRequestValidationError{}

// Validate checks the field values on ListAllTracksByDistrictResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllTracksByDistrictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllTracksByDistrictResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAllTracksByDistrictResponseMultiError, or nil if none found.
func (m *ListAllTracksByDistrictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllTracksByDistrictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAllTracksByDistrictResponseMultiError(errors)
	}

	return nil
}

// ListAllTracksByDistrictResponseMultiError is an error wrapping multiple
// validation errors returned by ListAllTracksByDistrictResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAllTracksByDistrictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllTracksByDistrictResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllTracksByDistrictResponseMultiError) AllErrors() []error { return m }

// ListAllTracksByDistrictResponseValidationError is the validation error
// returned by ListAllTracksByDistrictResponse.Validate if the designated
// constraints aren't met.
type ListAllTracksByDistrictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllTracksByDistrictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllTracksByDistrictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllTracksByDistrictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllTracksByDistrictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllTracksByDistrictResponseValidationError) ErrorName() string {
	return "ListAllTracksByDistrictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllTracksByDistrictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllTracksByDistrictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllTracksByDistrictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllTracksByDistrictResponseValidationError{}

// Validate checks the field values on ListDriftTracksByDistrictRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDriftTracksByDistrictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDriftTracksByDistrictRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDriftTracksByDistrictRequestMultiError, or nil if none found.
func (m *ListDriftTracksByDistrictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDriftTracksByDistrictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDistrict()) < 1 {
		err := ListDriftTracksByDistrictRequestValidationError{
			field:  "District",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDriftTracksByDistrictRequestMultiError(errors)
	}

	return nil
}

// ListDriftTracksByDistrictRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListDriftTracksByDistrictRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDriftTracksByDistrictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDriftTracksByDistrictRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDriftTracksByDistrictRequestMultiError) AllErrors() []error { return m }

// ListDriftTracksByDistrictRequestValidationError is the validation error
// returned by ListDriftTracksByDistrictRequest.Validate if the designated
// constraints aren't met.
type ListDriftTracksByDistrictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDriftTracksByDistrictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDriftTracksByDistrictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDriftTracksByDistrictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDriftTracksByDistrictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDriftTracksByDistrictRequestValidationError) ErrorName() string {
	return "ListDriftTracksByDistrictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDriftTracksByDistrictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDriftTracksByDistrictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDriftTracksByDistrictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDriftTracksByDistrictRequestValidationError{}

// Validate checks the field values on ListDriftTracksByDistrictResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDriftTracksByDistrictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDriftTracksByDistrictResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDriftTracksByDistrictResponseMultiError, or nil if none found.
func (m *ListDriftTracksByDistrictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDriftTracksByDistrictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDriftTracksByDistrictResponseMultiError(errors)
	}

	return nil
}

// ListDriftTracksByDistrictResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListDriftTracksByDistrictResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDriftTracksByDistrictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDriftTracksByDistrictResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDriftTracksByDistrictResponseMultiError) AllErrors() []error { return m }

// ListDriftTracksByDistrictResponseValidationError is the validation error
// returned by ListDriftTracksByDistrictResponse.Validate if the designated
// constraints aren't met.
type ListDriftTracksByDistrictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDriftTracksByDistrictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDriftTracksByDistrictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDriftTracksByDistrictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDriftTracksByDistrictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDriftTracksByDistrictResponseValidationError) ErrorName() string {
	return "ListDriftTracksByDistrictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDriftTracksByDistrictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDriftTracksByDistrictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDriftTracksByDistrictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDriftTracksByDistrictResponseValidationError{}

// Validate checks the field values on GetAlternativesByDistrictAndTrackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAlternativesByDistrictAndTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAlternativesByDistrictAndTrackRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetAlternativesByDistrictAndTrackRequestMultiError, or nil if none found.
func (m *GetAlternativesByDistrictAndTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlternativesByDistrictAndTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDistrict()) < 1 {
		err := GetAlternativesByDistrictAndTrackRequestValidationError{
			field:  "District",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTrack()) < 1 {
		err := GetAlternativesByDistrictAndTrackRequestValidationError{
			field:  "Track",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlternativesByDistrictAndTrackRequestMultiError(errors)
	}

	return nil
}

// GetAlternativesByDistrictAndTrackRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetAlternativesByDistrictAndTrackRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlternativesByDistrictAndTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlternativesByDistrictAndTrackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlternativesByDistrictAndTrackRequestMultiError) AllErrors() []error { return m }

// GetAlternativesByDistrictAndTrackRequestValidationError is the validation
// error returned by GetAlternativesByDistrictAndTrackRequest.Validate if the
// designated constraints aren't met.
type GetAlternativesByDistrictAndTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlternativesByDistrictAndTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlternativesByDistrictAndTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlternativesByDistrictAndTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlternativesByDistrictAndTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlternativesByDistrictAndTrackRequestValidationError) ErrorName() string {
	return "GetAlternativesByDistrictAndTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlternativesByDistrictAndTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlternativesByDistrictAndTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlternativesByDistrictAndTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlternativesByDistrictAndTrackRequestValidationError{}

// Validate checks the field values on
// GetAlternativesByDistrictAndTrackResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAlternativesByDistrictAndTrackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAlternativesByDistrictAndTrackResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetAlternativesByDistrictAndTrackResponseMultiError, or nil if none found.
func (m *GetAlternativesByDistrictAndTrackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlternativesByDistrictAndTrackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAlternativesByDistrictAndTrackResponseMultiError(errors)
	}

	return nil
}

// GetAlternativesByDistrictAndTrackResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetAlternativesByDistrictAndTrackResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlternativesByDistrictAndTrackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlternativesByDistrictAndTrackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlternativesByDistrictAndTrackResponseMultiError) AllErrors() []error { return m }

// GetAlternativesByDistrictAndTrackResponseValidationError is the validation
// error returned by GetAlternativesByDistrictAndTrackResponse.Validate if the
// designated constraints aren't met.
type GetAlternativesByDistrictAndTrackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlternativesByDistrictAndTrackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlternativesByDistrictAndTrackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlternativesByDistrictAndTrackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlternativesByDistrictAndTrackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlternativesByDistrictAndTrackResponseValidationError) ErrorName() string {
	return "GetAlternativesByDistrictAndTrackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlternativesByDistrictAndTrackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlternativesByDistrictAndTrackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlternativesByDistrictAndTrackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlternativesByDistrictAndTrackResponseValidationError{}

// Validate checks the field values on GetCollisionsByDistrictAndTrackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCollisionsByDistrictAndTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCollisionsByDistrictAndTrackRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCollisionsByDistrictAndTrackRequestMultiError, or nil if none found.
func (m *GetCollisionsByDistrictAndTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollisionsByDistrictAndTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDistrict()) < 1 {
		err := GetCollisionsByDistrictAndTrackRequestValidationError{
			field:  "District",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTrack()) < 1 {
		err := GetCollisionsByDistrictAndTrackRequestValidationError{
			field:  "Track",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollisionsByDistrictAndTrackRequestMultiError(errors)
	}

	return nil
}

// GetCollisionsByDistrictAndTrackRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCollisionsByDistrictAndTrackRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollisionsByDistrictAndTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollisionsByDistrictAndTrackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollisionsByDistrictAndTrackRequestMultiError) AllErrors() []error { return m }

// GetCollisionsByDistrictAndTrackRequestValidationError is the validation
// error returned by GetCollisionsByDistrictAndTrackRequest.Validate if the
// designated constraints aren't met.
type GetCollisionsByDistrictAndTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollisionsByDistrictAndTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollisionsByDistrictAndTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollisionsByDistrictAndTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollisionsByDistrictAndTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollisionsByDistrictAndTrackRequestValidationError) ErrorName() string {
	return "GetCollisionsByDistrictAndTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollisionsByDistrictAndTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollisionsByDistrictAndTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollisionsByDistrictAndTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollisionsByDistrictAndTrackRequestValidationError{}

// Validate checks the field values on GetCollisionsByDistrictAndTrackResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCollisionsByDistrictAndTrackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCollisionsByDistrictAndTrackResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCollisionsByDistrictAndTrackResponseMultiError, or nil if none found.
func (m *GetCollisionsByDistrictAndTrackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollisionsByDistrictAndTrackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCollisionsByDistrictAndTrackResponseMultiError(errors)
	}

	return nil
}

// GetCollisionsByDistrictAndTrackResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCollisionsByDistrictAndTrackResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCollisionsByDistrictAndTrackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollisionsByDistrictAndTrackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollisionsByDistrictAndTrackResponseMultiError) AllErrors() []error { return m }

// GetCollisionsByDistrictAndTrackResponseValidationError is the validation
// error returned by GetCollisionsByDistrictAndTrackResponse.Validate if the
// designated constraints aren't met.
type GetCollisionsByDistrictAndTrackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollisionsByDistrictAndTrackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollisionsByDistrictAndTrackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollisionsByDistrictAndTrackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollisionsByDistrictAndTrackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollisionsByDistrictAndTrackResponseValidationError) ErrorName() string {
	return "GetCollisionsByDistrictAndTrackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollisionsByDistrictAndTrackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollisionsByDistrictAndTrackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollisionsByDistrictAndTrackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollisionsByDistrictAndTrackResponseValidationError{}
