// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: collide/v1/collide.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDistrictsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDistrictsRequest) Reset() {
	*x = ListDistrictsRequest{}
	mi := &file_collide_v1_collide_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDistrictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDistrictsRequest) ProtoMessage() {}

func (x *ListDistrictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDistrictsRequest.ProtoReflect.Descriptor instead.
func (*ListDistrictsRequest) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{0}
}

type ListDistrictsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Districts     []string               `protobuf:"bytes,1,rep,name=districts,proto3" json:"districts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDistrictsResponse) Reset() {
	*x = ListDistrictsResponse{}
	mi := &file_collide_v1_collide_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDistrictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDistrictsResponse) ProtoMessage() {}

func (x *ListDistrictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDistrictsResponse.ProtoReflect.Descriptor instead.
func (*ListDistrictsResponse) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{1}
}

func (x *ListDistrictsResponse) GetDistricts() []string {
	if x != nil {
		return x.Districts
	}
	return nil
}

type ListAllTracksByDistrictRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	District      string                 `protobuf:"bytes,1,opt,name=district,proto3" json:"district,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllTracksByDistrictRequest) Reset() {
	*x = ListAllTracksByDistrictRequest{}
	mi := &file_collide_v1_collide_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllTracksByDistrictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTracksByDistrictRequest) ProtoMessage() {}

func (x *ListAllTracksByDistrictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTracksByDistrictRequest.ProtoReflect.Descriptor instead.
func (*ListAllTracksByDistrictRequest) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{2}
}

func (x *ListAllTracksByDistrictRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

type ListAllTracksByDistrictResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []string               `protobuf:"bytes,1,rep,name=tracks,json=collide,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllTracksByDistrictResponse) Reset() {
	*x = ListAllTracksByDistrictResponse{}
	mi := &file_collide_v1_collide_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllTracksByDistrictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllTracksByDistrictResponse) ProtoMessage() {}

func (x *ListAllTracksByDistrictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllTracksByDistrictResponse.ProtoReflect.Descriptor instead.
func (*ListAllTracksByDistrictResponse) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{3}
}

func (x *ListAllTracksByDistrictResponse) GetTracks() []string {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type ListDriftTracksByDistrictRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	District      string                 `protobuf:"bytes,1,opt,name=district,proto3" json:"district,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDriftTracksByDistrictRequest) Reset() {
	*x = ListDriftTracksByDistrictRequest{}
	mi := &file_collide_v1_collide_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriftTracksByDistrictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriftTracksByDistrictRequest) ProtoMessage() {}

func (x *ListDriftTracksByDistrictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriftTracksByDistrictRequest.ProtoReflect.Descriptor instead.
func (*ListDriftTracksByDistrictRequest) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{4}
}

func (x *ListDriftTracksByDistrictRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

type ListDriftTracksByDistrictResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []string               `protobuf:"bytes,1,rep,name=tracks,json=collide,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDriftTracksByDistrictResponse) Reset() {
	*x = ListDriftTracksByDistrictResponse{}
	mi := &file_collide_v1_collide_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriftTracksByDistrictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriftTracksByDistrictResponse) ProtoMessage() {}

func (x *ListDriftTracksByDistrictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriftTracksByDistrictResponse.ProtoReflect.Descriptor instead.
func (*ListDriftTracksByDistrictResponse) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{5}
}

func (x *ListDriftTracksByDistrictResponse) GetTracks() []string {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type GetAlternativesByDistrictAndTrackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	District      string                 `protobuf:"bytes,1,opt,name=district,proto3" json:"district,omitempty"`
	Track         string                 `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlternativesByDistrictAndTrackRequest) Reset() {
	*x = GetAlternativesByDistrictAndTrackRequest{}
	mi := &file_collide_v1_collide_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlternativesByDistrictAndTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlternativesByDistrictAndTrackRequest) ProtoMessage() {}

func (x *GetAlternativesByDistrictAndTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlternativesByDistrictAndTrackRequest.ProtoReflect.Descriptor instead.
func (*GetAlternativesByDistrictAndTrackRequest) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{6}
}

func (x *GetAlternativesByDistrictAndTrackRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetAlternativesByDistrictAndTrackRequest) GetTrack() string {
	if x != nil {
		return x.Track
	}
	return ""
}

type GetAlternativesByDistrictAndTrackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []string               `protobuf:"bytes,1,rep,name=tracks,json=collide,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlternativesByDistrictAndTrackResponse) Reset() {
	*x = GetAlternativesByDistrictAndTrackResponse{}
	mi := &file_collide_v1_collide_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlternativesByDistrictAndTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlternativesByDistrictAndTrackResponse) ProtoMessage() {}

func (x *GetAlternativesByDistrictAndTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlternativesByDistrictAndTrackResponse.ProtoReflect.Descriptor instead.
func (*GetAlternativesByDistrictAndTrackResponse) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{7}
}

func (x *GetAlternativesByDistrictAndTrackResponse) GetTracks() []string {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type GetCollisionsByDistrictAndTrackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	District      string                 `protobuf:"bytes,1,opt,name=district,proto3" json:"district,omitempty"`
	Track         string                 `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCollisionsByDistrictAndTrackRequest) Reset() {
	*x = GetCollisionsByDistrictAndTrackRequest{}
	mi := &file_collide_v1_collide_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCollisionsByDistrictAndTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollisionsByDistrictAndTrackRequest) ProtoMessage() {}

func (x *GetCollisionsByDistrictAndTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollisionsByDistrictAndTrackRequest.ProtoReflect.Descriptor instead.
func (*GetCollisionsByDistrictAndTrackRequest) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{8}
}

func (x *GetCollisionsByDistrictAndTrackRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetCollisionsByDistrictAndTrackRequest) GetTrack() string {
	if x != nil {
		return x.Track
	}
	return ""
}

type GetCollisionsByDistrictAndTrackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []string               `protobuf:"bytes,1,rep,name=tracks,json=collide,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCollisionsByDistrictAndTrackResponse) Reset() {
	*x = GetCollisionsByDistrictAndTrackResponse{}
	mi := &file_collide_v1_collide_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCollisionsByDistrictAndTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollisionsByDistrictAndTrackResponse) ProtoMessage() {}

func (x *GetCollisionsByDistrictAndTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collide_v1_collide_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollisionsByDistrictAndTrackResponse.ProtoReflect.Descriptor instead.
func (*GetCollisionsByDistrictAndTrackResponse) Descriptor() ([]byte, []int) {
	return file_collide_v1_collide_proto_rawDescGZIP(), []int{9}
}

func (x *GetCollisionsByDistrictAndTrackResponse) GetTracks() []string {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_collide_v1_collide_proto protoreflect.FileDescriptor

const file_collide_v1_collide_proto_rawDesc = "" +
	"\n" +
	"\x18collide/v1/collide.proto\x12\n" +
	"collide.v1\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x17validate/validate.proto\"\x16\n" +
	"\x14ListDistrictsRequest\"5\n" +
	"\x15ListDistrictsResponse\x12\x1c\n" +
	"\tdistricts\x18\x01 \x03(\tR\tdistricts\"E\n" +
	"\x1eListAllTracksByDistrictRequest\x12#\n" +
	"\bdistrict\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bdistrict\":\n" +
	"\x1fListAllTracksByDistrictResponse\x12\x17\n" +
	"\x06tracks\x18\x01 \x03(\tR\acollide\"G\n" +
	" ListDriftTracksByDistrictRequest\x12#\n" +
	"\bdistrict\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bdistrict\"<\n" +
	"!ListDriftTracksByDistrictResponse\x12\x17\n" +
	"\x06tracks\x18\x01 \x03(\tR\acollide\"n\n" +
	"(GetAlternativesByDistrictAndTrackRequest\x12#\n" +
	"\bdistrict\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bdistrict\x12\x1d\n" +
	"\x05track\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05track\"D\n" +
	")GetAlternativesByDistrictAndTrackResponse\x12\x17\n" +
	"\x06tracks\x18\x01 \x03(\tR\acollide\"l\n" +
	"&GetCollisionsByDistrictAndTrackRequest\x12#\n" +
	"\bdistrict\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bdistrict\x12\x1d\n" +
	"\x05track\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05track\"B\n" +
	"'GetCollisionsByDistrictAndTrackResponse\x12\x17\n" +
	"\x06tracks\x18\x01 \x03(\tR\acollide2\xce\f\n" +
	"\x0eCollideService\x12\xcf\x01\n" +
	"\rListDistricts\x12 .collide.v1.ListDistrictsRequest\x1a!.collide.v1.ListDistrictsResponse\"y\x92AY\n" +
	"\aCollide\x12\x0eList Districts\x1a>Returns a list of all districts from the configured track list\x82\xd3\xe4\x93\x02\x17\x12\x15/v1/collide/districts\x12\xa1\x02\n" +
	"\x17ListAllTracksByDistrict\x12*.collide.v1.ListAllTracksByDistrictRequest\x1a+.collide.v1.ListAllTracksByDistrictResponse\"\xac\x01\x92A}\n" +
	"\aCollide\x12\x1dList All Tracks In A District\x1aSReturns a list of all collide in a certain district, from the configured track list\x82\xd3\xe4\x93\x02&\x12$/v1/collide/districts/{district}/all\x12\xae\x02\n" +
	"\x19ListDriftTracksByDistrict\x12,.collide.v1.ListDriftTracksByDistrictRequest\x1a-.collide.v1.ListDriftTracksByDistrictResponse\"\xb3\x01\x92A\x81\x01\n" +
	"\aCollide\x12\x1fList Drift Tracks In A District\x1aUReturns a list of drift collide in a certain district, from the configured track list\x82\xd3\xe4\x93\x02(\x12&/v1/collide/districts/{district}/drift\x12\x99\x03\n" +
	"!GetAlternativesByDistrictAndTrack\x124.collide.v1.GetAlternativesByDistrictAndTrackRequest\x1a5.collide.v1.GetAlternativesByDistrictAndTrackResponse\"\x86\x02\x92A\xbf\x01\n" +
	"\aCollide\x12&Get Alternatives By District And Track\x1a\x8b\x01Returns a list of alternative drift collide in a certain district, which should not collide with the target, from the configured track list\x82\xd3\xe4\x93\x02=\x12;/v1/collide/districts/{district}/drift/{track}/alternatives\x12\xf8\x02\n" +
	"\x1fGetCollisionsByDistrictAndTrack\x122.collide.v1.GetCollisionsByDistrictAndTrackRequest\x1a3.collide.v1.GetCollisionsByDistrictAndTrackResponse\"\xeb\x01\x92A\xa6\x01\n" +
	"\aCollide\x12&Get Alternatives By District And Track\x1asReturns a list of collide which would collide with the target in a certain district, from the configured track list\x82\xd3\xe4\x93\x02;\x129/v1/collide/districts/{district}/drift/{track}/collisionsB(Z&github.com/zalgonoise/x/collide/pkg/pbb\x06proto3"

var (
	file_collide_v1_collide_proto_rawDescOnce sync.Once
	file_collide_v1_collide_proto_rawDescData []byte
)

func file_collide_v1_collide_proto_rawDescGZIP() []byte {
	file_collide_v1_collide_proto_rawDescOnce.Do(func() {
		file_collide_v1_collide_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_collide_v1_collide_proto_rawDesc), len(file_collide_v1_collide_proto_rawDesc)))
	})
	return file_collide_v1_collide_proto_rawDescData
}

var file_collide_v1_collide_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_collide_v1_collide_proto_goTypes = []any{
	(*ListDistrictsRequest)(nil),                      // 0: collide.v1.ListDistrictsRequest
	(*ListDistrictsResponse)(nil),                     // 1: collide.v1.ListDistrictsResponse
	(*ListAllTracksByDistrictRequest)(nil),            // 2: collide.v1.ListAllTracksByDistrictRequest
	(*ListAllTracksByDistrictResponse)(nil),           // 3: collide.v1.ListAllTracksByDistrictResponse
	(*ListDriftTracksByDistrictRequest)(nil),          // 4: collide.v1.ListDriftTracksByDistrictRequest
	(*ListDriftTracksByDistrictResponse)(nil),         // 5: collide.v1.ListDriftTracksByDistrictResponse
	(*GetAlternativesByDistrictAndTrackRequest)(nil),  // 6: collide.v1.GetAlternativesByDistrictAndTrackRequest
	(*GetAlternativesByDistrictAndTrackResponse)(nil), // 7: collide.v1.GetAlternativesByDistrictAndTrackResponse
	(*GetCollisionsByDistrictAndTrackRequest)(nil),    // 8: collide.v1.GetCollisionsByDistrictAndTrackRequest
	(*GetCollisionsByDistrictAndTrackResponse)(nil),   // 9: collide.v1.GetCollisionsByDistrictAndTrackResponse
}
var file_collide_v1_collide_proto_depIdxs = []int32{
	0, // 0: collide.v1.CollideService.ListDistricts:input_type -> collide.v1.ListDistrictsRequest
	2, // 1: collide.v1.CollideService.ListAllTracksByDistrict:input_type -> collide.v1.ListAllTracksByDistrictRequest
	4, // 2: collide.v1.CollideService.ListDriftTracksByDistrict:input_type -> collide.v1.ListDriftTracksByDistrictRequest
	6, // 3: collide.v1.CollideService.GetAlternativesByDistrictAndTrack:input_type -> collide.v1.GetAlternativesByDistrictAndTrackRequest
	8, // 4: collide.v1.CollideService.GetCollisionsByDistrictAndTrack:input_type -> collide.v1.GetCollisionsByDistrictAndTrackRequest
	1, // 5: collide.v1.CollideService.ListDistricts:output_type -> collide.v1.ListDistrictsResponse
	3, // 6: collide.v1.CollideService.ListAllTracksByDistrict:output_type -> collide.v1.ListAllTracksByDistrictResponse
	5, // 7: collide.v1.CollideService.ListDriftTracksByDistrict:output_type -> collide.v1.ListDriftTracksByDistrictResponse
	7, // 8: collide.v1.CollideService.GetAlternativesByDistrictAndTrack:output_type -> collide.v1.GetAlternativesByDistrictAndTrackResponse
	9, // 9: collide.v1.CollideService.GetCollisionsByDistrictAndTrack:output_type -> collide.v1.GetCollisionsByDistrictAndTrackResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_collide_v1_collide_proto_init() }
func file_collide_v1_collide_proto_init() {
	if File_collide_v1_collide_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_collide_v1_collide_proto_rawDesc), len(file_collide_v1_collide_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_collide_v1_collide_proto_goTypes,
		DependencyIndexes: file_collide_v1_collide_proto_depIdxs,
		MessageInfos:      file_collide_v1_collide_proto_msgTypes,
	}.Build()
	File_collide_v1_collide_proto = out.File
	file_collide_v1_collide_proto_goTypes = nil
	file_collide_v1_collide_proto_depIdxs = nil
}
