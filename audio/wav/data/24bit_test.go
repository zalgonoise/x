package data

import (
	"bytes"
	"reflect"
	"testing"
)

var (
	test24bitPCM = []byte{
		0xab, 0x31, 0x9, 0xfb, 0x86, 0xfc, 0x6f, 0xdc, 0xf4, 0x55, 0x5f, 0xf6, 0xf1, 0x75, 0x1, 0x9, 0x28, 0xf, 0x94, 0xa,
		0x16, 0xc0, 0xaf, 0x15, 0x10, 0xcb, 0xd, 0x65, 0x80, 0x0, 0x5d, 0xac, 0xfd, 0xa1, 0xe4, 0xa, 0x83, 0x94, 0x16, 0x39,
		0x54, 0x16, 0x1, 0x49, 0xf, 0x58, 0x5f, 0x6, 0x4b, 0x48, 0x3, 0xdb, 0x6a, 0xc, 0x57, 0x90, 0x1a, 0xd5, 0xcd, 0x23,
		0xce, 0x32, 0x23, 0xf9, 0x13, 0x14, 0x37, 0x9d, 0xfc, 0x3b, 0x2f, 0xef, 0xc3, 0x85, 0xf3, 0xdc, 0x92, 0x1, 0xf6,
		0xe2, 0x10, 0x3b, 0xa9, 0x1c, 0x77, 0x4f, 0x21, 0xb, 0x55, 0x1d, 0xab, 0xea, 0x10, 0xbe, 0xa7, 0x2, 0x88, 0x9b, 0x0,
		0xae, 0x73, 0xd, 0x51, 0x60, 0x16, 0xa6, 0x42, 0xc, 0x94, 0x7c, 0xf9, 0x78, 0xa0, 0xf2, 0x3b, 0x49, 0xfe, 0xc, 0x13,
		0x12, 0x16, 0xff, 0x1e, 0xb, 0xb, 0x1c, 0xe5, 0x19, 0x9, 0x6f, 0x5, 0xf5, 0xdc, 0xb0, 0xf9, 0xae, 0x43, 0x17, 0x4e,
		0x96, 0x28, 0xd6, 0x29, 0x1a, 0xa5, 0x7f, 0x0, 0xa7, 0x7e, 0xeb, 0xb, 0x75, 0xe0, 0xf2, 0x2e, 0xec, 0x1b, 0x9d, 0x8,
		0x4e, 0x14, 0x21, 0x12, 0x8a, 0x35, 0x59, 0x9a, 0x3e, 0x30, 0x3c, 0x21, 0xbc, 0xc5, 0xea, 0x70, 0xc, 0xcb, 0xc2,
		0x13, 0xcd, 0x4f, 0xad, 0xdc, 0xf6, 0x3e, 0xf3, 0x64, 0x17, 0xf, 0x17, 0xa, 0x24, 0x87, 0x4b, 0x29, 0x91, 0xcf,
		0x21, 0x4f, 0x7e, 0x15, 0xc5, 0x6c, 0xb, 0xfa, 0xd4, 0x8, 0x4c, 0x9f, 0xb, 0x5d, 0x1a, 0x9, 0xfe, 0x3e, 0xff, 0xf8,
		0x1, 0xf8, 0x82, 0xdd, 0xf4, 0x15, 0x5e, 0xf3, 0xfe, 0x16, 0xf8, 0xc3, 0x9a, 0xfd, 0xd5, 0x2c, 0xfe, 0x93, 0x4b,
		0x9, 0x5c, 0x8a, 0x21, 0x29, 0x8d, 0x2b, 0xa5, 0x11, 0x1b, 0xd8, 0x48, 0xfe, 0x41, 0x5d, 0xe4, 0x36, 0xd6, 0xdb,
		0x53, 0xf5, 0xe9, 0x84, 0xc4, 0xff, 0xce, 0xba, 0xe, 0xee, 0x96, 0x10, 0x9d, 0xfe, 0x3, 0x41, 0xc7, 0xfb, 0xee,
		0x3b, 0xa, 0xe3, 0x0, 0x1c, 0x3a, 0x25, 0x18, 0xd7, 0x1b, 0x5, 0x75, 0x5e, 0xee, 0x29, 0xf4, 0xd8, 0x1c, 0xe2, 0xd1,
		0x9a, 0x14, 0xd9, 0x5d, 0xe8, 0xdc, 0xfc, 0x91, 0xe1, 0x92, 0x96, 0xf8, 0xa6, 0xa9, 0x12, 0x69, 0x22, 0x13, 0xef,
		0x6d, 0x0, 0xc1, 0xd2, 0xf3, 0x2b, 0xeb, 0xf2, 0x6c, 0x9f, 0xf5, 0xa4, 0x90, 0xf5, 0x44, 0x3c, 0xeb, 0x89, 0xfb,
		0xd7, 0x5f, 0x8d, 0xd1, 0xdc, 0x63, 0xe7, 0x87, 0x38, 0x6, 0xbc, 0x6f, 0x11, 0xfc, 0x61, 0x8, 0x4c, 0x88, 0xfa,
		0x74, 0x97, 0xee, 0xd9, 0x7a, 0xe8, 0x67, 0x1b, 0xec, 0x6d, 0xb8, 0xf0, 0xed, 0x33, 0xec, 0xfa, 0x96, 0xe6, 0xa0,
		0x3f, 0xeb, 0x91, 0x45, 0xf3, 0xb5, 0xa5, 0xef, 0xd7, 0x86, 0xdf, 0x6e, 0xdc, 0xd3,
	}
	test24bitHeader = []byte{0x64, 0x61, 0x74, 0x61, 0x8c, 0x6d, 0x0, 0x0}
)

func Test24bitHeader(t *testing.T) {
	header, err := HeaderFrom(test24bitHeader)
	if err != nil {
		t.Error(err)
		return
	}
	chunk := &Chunk24bit{
		ChunkHeader: header,
		Depth:       24, // set by NewChunk()
	}

	if output := chunk.Header(); !reflect.DeepEqual(*header, *output) {
		t.Errorf("output mismatch error: wanted %+v ; got %+v", *header, *output)
	}

	if bitDepth := chunk.BitDepth(); bitDepth != chunk.Depth {
		t.Errorf("bit depth mismatch error: wanted %v ; got %v", chunk.Depth, bitDepth)
	}
}

func Test24bitParse(t *testing.T) {
	header, err := HeaderFrom(test24bitHeader)
	if err != nil {
		t.Error(err)
		return
	}
	chunk := &Chunk24bit{
		ChunkHeader: header,
	}

	chunk.Parse(test24bitPCM)
	buf := chunk.Generate()
	if !bytes.Equal(test24bitPCM, buf) {
		t.Errorf("output mismatch error: input is not the same as output")
	}

	if i := chunk.Value(); len(i) == 0 {
		t.Errorf("expected integer PCM buffer to be longer than zero")
	}

	if f := chunk.Float(); len(f) == 0 {
		t.Errorf("expected float PCM buffer to be longer than zero")
	}

	if chunk.Reset(); chunk.Data != nil {
		t.Errorf("expected Reset() method to clear the data in the chunk")
	}
}
